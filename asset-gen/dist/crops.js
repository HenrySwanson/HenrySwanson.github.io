(()=>{"use strict";const e=JSON.parse('[{"name":"Blue Jazz","season":"Spring","seed_cost":30,"sell_price":50,"days_to_grow":7},{"name":"Carrot","season":"Spring","seed_cost":0,"sell_price":35,"days_to_grow":3},{"name":"Cauliflower","season":"Spring","seed_cost":80,"sell_price":175,"days_to_grow":12},{"name":"Coffee Bean","season":"Spring","seed_cost":15,"sell_price":15,"days_to_grow":10,"regrowth_period":2,"yield":4,"percent_chance_extra":2},{"name":"Garlic","season":"Spring","seed_cost":40,"sell_price":60,"days_to_grow":4},{"name":"Green Bean","season":"Spring","seed_cost":60,"sell_price":40,"days_to_grow":10,"regrowth_period":3},{"name":"Kale","season":"Spring","seed_cost":70,"sell_price":110,"days_to_grow":6},{"name":"Parsnip","season":"Spring","seed_cost":20,"sell_price":35,"days_to_grow":4},{"name":"Potato","season":"Spring","seed_cost":50,"sell_price":80,"days_to_grow":6,"percent_chance_extra":25},{"name":"Rhubarb","season":"Spring","seed_cost":100,"sell_price":220,"days_to_grow":13},{"name":"Rice","season":"Spring","seed_cost":40,"sell_price":30,"days_to_grow":6},{"name":"Strawberry","season":"Spring","seed_cost":100,"sell_price":120,"days_to_grow":8,"regrowth_period":4,"percent_chance_extra":2},{"name":"Tulip","season":"Spring","seed_cost":20,"sell_price":30,"days_to_grow":6}]');var t;function r(e,r){var o,s,n,a,i;let l=28-r,d=0,c=0;if(l>=e.days_to_grow&&(d+=1,c+=e.days_to_grow,e.regrowth_period)){let t=Math.floor((l-e.days_to_grow)/e.regrowth_period);d+=t,c+=t*e.regrowth_period}let _=d*(null!==(o=e.yield)&&void 0!==o?o:1)+(null!==(s=e.percent_chance_extra)&&void 0!==s?s:0)/100,p=_*e.sell_price-e.seed_cost,u=p/c;return{name:e.name,season:t.fromString(e.season),seed_cost:e.seed_cost,sell_price:e.sell_price,days_to_grow:e.days_to_grow,regrowth_period:null!==(n=e.regrowth_period)&&void 0!==n?n:null,yield:null!==(a=e.yield)&&void 0!==a?a:null,percent_chance_extra:null!==(i=e.percent_chance_extra)&&void 0!==i?i:null,useful_days:c,num_harvests:d,num_crops:_,profit:p,daily_profit:u}}!function(e){e[e.SPRING=0]="SPRING",e[e.SUMMER=1]="SUMMER",e[e.FALL=2]="FALL"}(t||(t={})),function(e){e.fromString=function(t){switch(t.toUpperCase()){case"SPRING":return e.SPRING;case"SUMMER":return e.SUMMER;case"FALL":return e.FALL;default:throw new Error(`Unknown season ${t}`)}}}(t||(t={}));const o=[["Name",e=>e.name],["Season",e=>t[e.season]],["Seed Cost",e=>e.seed_cost.toString()],["Sell Price",e=>e.sell_price.toString()],["Days to Grow",e=>e.days_to_grow.toString()],["Regrowth Period",e=>{var t,r;return null!==(r=null===(t=e.regrowth_period)||void 0===t?void 0:t.toString())&&void 0!==r?r:"-"}],["Yield",e=>{var t;let r=null!==(t=e.yield)&&void 0!==t?t:1;return e.percent_chance_extra?`${r} + ${e.percent_chance_extra}%`:r.toString()}],["Useful Days",e=>e.useful_days.toString()],["Num Harvests",e=>e.num_harvests.toString()],["Num Crops",e=>{let t=e.num_crops;return Number.isInteger(t)?t.toString():e.num_crops.toFixed(2)}],["Profit",e=>e.profit.toFixed(2)],["Daily Profit",e=>Number.isFinite(e.daily_profit)?e.daily_profit.toFixed(2):"-"]];class s{constructor(e,t){this.data=t,this.row=e;for(let[e,t]of o){let e=t(this.data);this.row.insertCell().appendChild(document.createTextNode(e))}}}class n{constructor(e){this.table=e,this.rows=[];let t=this.table.createTHead();this.tbody=this.table.createTBody();let r=t.insertRow();for(let[e,[t,s]]of o.entries()){let o=r.insertCell();o.appendChild(document.createTextNode(t)),o.addEventListener("click",(t=>{this.sortRows(e)}))}this.recalculateRows(1)}recalculateRows(t){this.tbody.replaceChildren();for(let o of e){let e=r(o,t),n=this.tbody.insertRow();this.rows.push(new s(n,e))}}sortRows(e){let t=this.table.querySelectorAll("thead td"),r=!0;for(let[o,s]of t.entries())e===o?"descending"===s.getAttribute("aria-sort")?(s.setAttribute("aria-sort","ascending"),r=!1):s.setAttribute("aria-sort","descending"):s.removeAttribute("aria-sort");this.rows.sort(((t,o)=>{let s=t.row.children[e].textContent>o.row.children[e].textContent?1:-1;return r?s:-s}));for(let e of this.rows)this.tbody.appendChild(e.row)}}function a(){console.log("Initializing!");let e=document.getElementById("crop-table");if(!(e instanceof HTMLTableElement))throw new Error("crop-table should be a <table>");let t=document.getElementById("input-panel"),r=document.querySelector("#day"),o=new n(e);t.addEventListener("change",(e=>{let t=r.valueAsNumber;o.recalculateRows(t)}))}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",a):a()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,