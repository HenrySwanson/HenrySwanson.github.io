(()=>{"use strict";const e=JSON.parse('[{"name":"Parsnip","season":"Spring","seed_cost":20,"sell_price":35,"days_to_grow":4},{"name":"Cauliflower","season":"Spring","seed_cost":80,"sell_price":175,"days_to_grow":12}]');var t;function o(e){let o=e.sell_price-e.seed_cost,r=o/e.days_to_grow;return{name:e.name,season:t.fromString(e.season),seed_cost:e.seed_cost,sell_price:e.sell_price,days_to_grow:e.days_to_grow,profit:o,daily_profit:r}}!function(e){e[e.SPRING=0]="SPRING",e[e.SUMMER=1]="SUMMER",e[e.FALL=2]="FALL"}(t||(t={})),function(e){e.fromString=function(t){switch(t.toUpperCase()){case"SPRING":return e.SPRING;case"SUMMER":return e.SUMMER;case"FALL":return e.FALL;default:throw new Error(`Unknown season ${t}`)}}}(t||(t={}));let r=[["Name","name"],["Season","season"],["Seed Cost","seed_cost"],["Sell Price","sell_price"],["Days to Grow","days_to_grow"],["Profit","profit"],["Daily Profit","daily_profit"]];function n(){console.log("Hydrating!");let t=document.getElementById("crop-table");if(!(t instanceof HTMLTableElement))throw new Error("crop-table should be a <table>");t.replaceChildren();let n=t.createTHead().insertRow();for(let[e,t]of r)n.insertCell().appendChild(document.createTextNode(e));let s=t.createTBody();for(let t of e){let e=o(t),n=s.insertRow();for(let[t,o]of r){let t=e[o];n.insertCell().appendChild(document.createTextNode(t.toString()))}}}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",n):n()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JvcHMuanMiLCJtYXBwaW5ncyI6IjJOQVFBLElBQUtBLEVBNkJMLFNBQVNDLEVBQVVDLEdBQ2YsSUFBSUMsRUFBU0QsRUFBS0UsV0FBYUYsRUFBS0csVUFDaENDLEVBQWVILEVBQVNELEVBQUtLLGFBQ2pDLE1BQU8sQ0FDSEMsS0FBTU4sRUFBS00sS0FDWEMsT0FBUVQsRUFBT1UsV0FBV1IsRUFBS08sUUFDL0JKLFVBQVdILEVBQUtHLFVBQ2hCRCxXQUFZRixFQUFLRSxXQUNqQkcsYUFBY0wsRUFBS0ssYUFDbkJKLFNBQ0FHLGVBRVIsRUF6Q0EsU0FBS04sR0FDRCx1QkFBUSx1QkFBUSxrQkFDbkIsQ0FGRCxDQUFLQSxJQUFBQSxFQUFNLEtBSVgsU0FBVUEsR0FDVSxFQUFBVSxXQUFoQixTQUEyQkMsR0FDdkIsT0FBUUEsRUFBRUMsZUFDTixJQUFLLFNBQ0QsT0FBT1osRUFBT2EsT0FDbEIsSUFBSyxTQUNELE9BQU9iLEVBQU9jLE9BQ2xCLElBQUssT0FDRCxPQUFPZCxFQUFPZSxLQUNsQixRQUNJLE1BQU0sSUFBSUMsTUFBTSxrQkFBa0JMLEtBRTlDLENBQ0gsQ0FiRCxDQUFVWCxJQUFBQSxFQUFNLEtBd0NoQixJQUFJaUIsRUFBb0IsQ0FDcEIsQ0FBQyxPQUFRLFFBQ1QsQ0FBQyxTQUFVLFVBQ1gsQ0FBQyxZQUFhLGFBQ2QsQ0FBQyxhQUFjLGNBQ2YsQ0FBQyxlQUFnQixnQkFDakIsQ0FBQyxTQUFVLFVBQ1gsQ0FBQyxlQUFnQixpQkFHckIsU0FBU0MsSUFDTEMsUUFBUUMsSUFBSSxjQUNaLElBQUlDLEVBQVFDLFNBQVNDLGVBQWUsY0FDcEMsS0FBTUYsYUFBaUJHLGtCQUNuQixNQUFNLElBQUlSLE1BQU0sa0NBR3BCSyxFQUFNSSxrQkFHTixJQUNJQyxFQURRTCxFQUFNTSxjQUNGQyxZQUNoQixJQUFLLElBQUtDLEVBQVVDLEtBQU1iLEVBQ3RCUyxFQUFJSyxhQUFhQyxZQUFZVixTQUFTVyxlQUFlSixJQUl6RCxJQUFJSyxFQUFRYixFQUFNYyxjQUNsQixJQUFLLElBQUlDLEtBQVEsRUFBVyxDQUN4QixJQUFJQyxFQUFTcEMsRUFBVW1DLEdBQ25CVixFQUFNUSxFQUFNTixZQUNoQixJQUFLLElBQUtFLEVBQUdRLEtBQWFyQixFQUFTLENBQy9CLElBQUlzQixFQUFRRixFQUFPQyxHQUNuQlosRUFBSUssYUFBYUMsWUFBWVYsU0FBU1csZUFBZU0sRUFBTUMsWUFDL0QsQ0FDSixDQUNKLENBRzRCLFlBQXhCbEIsU0FBU21CLFdBRVRuQixTQUFTb0IsaUJBQWlCLG1CQUFvQnhCLEdBRzlDQSxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2Nyb3BzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuLy8gc2hvdWxkIGkgcHVsbCB0aGlzIGZyb20gYSBKU09OIGxpa2UgaSdtIGRvaW5nIG5vdz8gb3Igc2hvdWxkIGkganVzdFxyXG4vLyBoYXJkLWNvZGUgaXQgaW5saW5lIChtaWdodCBiZSBtb3JlIHJlYWRhYmxlKVxyXG5pbXBvcnQgY3JvcF9kYXRhIGZyb20gXCIuL2Nyb3BzLmpzb25cIjtcclxuXHJcbnR5cGUgQ3JvcERhdGEgPSB0eXBlb2YgY3JvcF9kYXRhW251bWJlcl07XHJcblxyXG5lbnVtIFNlYXNvbiB7XHJcbiAgICBTUFJJTkcsIFNVTU1FUiwgRkFMTFxyXG59XHJcblxyXG5uYW1lc3BhY2UgU2Vhc29uIHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBmcm9tU3RyaW5nKHM6IHN0cmluZyk6IFNlYXNvbiB7XHJcbiAgICAgICAgc3dpdGNoIChzLnRvVXBwZXJDYXNlKCkpIHtcclxuICAgICAgICAgICAgY2FzZSBcIlNQUklOR1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFNlYXNvbi5TUFJJTkc7XHJcbiAgICAgICAgICAgIGNhc2UgXCJTVU1NRVJcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBTZWFzb24uU1VNTUVSO1xyXG4gICAgICAgICAgICBjYXNlIFwiRkFMTFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFNlYXNvbi5GQUxMO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHNlYXNvbiAke3N9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG50eXBlIENyb3BPdXRwdXQgPSB7XHJcbiAgICBuYW1lOiBTdHJpbmcsXHJcbiAgICBzZWFzb246IFNlYXNvbixcclxuICAgIHNlZWRfY29zdDogbnVtYmVyLFxyXG4gICAgc2VsbF9wcmljZTogbnVtYmVyLFxyXG4gICAgZGF5c190b19ncm93OiBudW1iZXIsXHJcbiAgICBwcm9maXQ6IG51bWJlcixcclxuICAgIGRhaWx5X3Byb2ZpdDogbnVtYmVyLFxyXG59O1xyXG5cclxuZnVuY3Rpb24gY2FsY3VsYXRlKGNyb3A6IENyb3BEYXRhKTogQ3JvcE91dHB1dCB7XHJcbiAgICBsZXQgcHJvZml0ID0gY3JvcC5zZWxsX3ByaWNlIC0gY3JvcC5zZWVkX2Nvc3Q7XHJcbiAgICBsZXQgZGFpbHlfcHJvZml0ID0gcHJvZml0IC8gY3JvcC5kYXlzX3RvX2dyb3c7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5hbWU6IGNyb3AubmFtZSxcclxuICAgICAgICBzZWFzb246IFNlYXNvbi5mcm9tU3RyaW5nKGNyb3Auc2Vhc29uKSxcclxuICAgICAgICBzZWVkX2Nvc3Q6IGNyb3Auc2VlZF9jb3N0LFxyXG4gICAgICAgIHNlbGxfcHJpY2U6IGNyb3Auc2VsbF9wcmljZSxcclxuICAgICAgICBkYXlzX3RvX2dyb3c6IGNyb3AuZGF5c190b19ncm93LFxyXG4gICAgICAgIHByb2ZpdCxcclxuICAgICAgICBkYWlseV9wcm9maXQsXHJcbiAgICB9O1xyXG59XHJcblxyXG50eXBlIENvbHVtbiA9IFtzdHJpbmcsIGtleW9mIENyb3BPdXRwdXRdO1xyXG5sZXQgY29sdW1uczogQ29sdW1uW10gPSBbXHJcbiAgICBbXCJOYW1lXCIsIFwibmFtZVwiXSxcclxuICAgIFtcIlNlYXNvblwiLCBcInNlYXNvblwiXSxcclxuICAgIFtcIlNlZWQgQ29zdFwiLCBcInNlZWRfY29zdFwiXSxcclxuICAgIFtcIlNlbGwgUHJpY2VcIiwgXCJzZWxsX3ByaWNlXCJdLFxyXG4gICAgW1wiRGF5cyB0byBHcm93XCIsIFwiZGF5c190b19ncm93XCJdLFxyXG4gICAgW1wiUHJvZml0XCIsIFwicHJvZml0XCJdLFxyXG4gICAgW1wiRGFpbHkgUHJvZml0XCIsIFwiZGFpbHlfcHJvZml0XCJdXHJcbl07XHJcblxyXG5mdW5jdGlvbiBoeWRyYXRlVGFibGUoKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIkh5ZHJhdGluZyFcIik7XHJcbiAgICBsZXQgdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNyb3AtdGFibGVcIik7XHJcbiAgICBpZiAoISh0YWJsZSBpbnN0YW5jZW9mIEhUTUxUYWJsZUVsZW1lbnQpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY3JvcC10YWJsZSBzaG91bGQgYmUgYSA8dGFibGU+XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHRhYmxlLnJlcGxhY2VDaGlsZHJlbigpO1xyXG5cclxuICAgIC8vIFRhYmxlIGhlYWRlclxyXG4gICAgbGV0IHRoZWFkID0gdGFibGUuY3JlYXRlVEhlYWQoKTtcclxuICAgIGxldCByb3cgPSB0aGVhZC5pbnNlcnRSb3coKTtcclxuICAgIGZvciAobGV0IFtjb2xfbmFtZSwgX10gb2YgY29sdW1ucykge1xyXG4gICAgICAgIHJvdy5pbnNlcnRDZWxsKCkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY29sX25hbWUpKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBSb3dzIGluIHRoZSB0YWJsZSBib2R5XHJcbiAgICBsZXQgdGJvZHkgPSB0YWJsZS5jcmVhdGVUQm9keSgpO1xyXG4gICAgZm9yIChsZXQgZGF0YSBvZiBjcm9wX2RhdGEpIHtcclxuICAgICAgICBsZXQgb3V0cHV0ID0gY2FsY3VsYXRlKGRhdGEpO1xyXG4gICAgICAgIGxldCByb3cgPSB0Ym9keS5pbnNlcnRSb3coKTtcclxuICAgICAgICBmb3IgKGxldCBbXywgY29sX2F0dHJdIG9mIGNvbHVtbnMpIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gb3V0cHV0W2NvbF9hdHRyXTtcclxuICAgICAgICAgICAgcm93Lmluc2VydENlbGwoKS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh2YWx1ZS50b1N0cmluZygpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyBIeWRyYXRlIHRoZSB0YWJsZVxyXG5pZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcclxuICAgIC8vIExvYWRpbmcgaGFzbid0IGZpbmlzaGVkIHlldFxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgaHlkcmF0ZVRhYmxlKTtcclxufSBlbHNlIHtcclxuICAgIC8vIGBET01Db250ZW50TG9hZGVkYCBoYXMgYWxyZWFkeSBmaXJlZFxyXG4gICAgaHlkcmF0ZVRhYmxlKCk7XHJcbn0iXSwibmFtZXMiOlsiU2Vhc29uIiwiY2FsY3VsYXRlIiwiY3JvcCIsInByb2ZpdCIsInNlbGxfcHJpY2UiLCJzZWVkX2Nvc3QiLCJkYWlseV9wcm9maXQiLCJkYXlzX3RvX2dyb3ciLCJuYW1lIiwic2Vhc29uIiwiZnJvbVN0cmluZyIsInMiLCJ0b1VwcGVyQ2FzZSIsIlNQUklORyIsIlNVTU1FUiIsIkZBTEwiLCJFcnJvciIsImNvbHVtbnMiLCJoeWRyYXRlVGFibGUiLCJjb25zb2xlIiwibG9nIiwidGFibGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiSFRNTFRhYmxlRWxlbWVudCIsInJlcGxhY2VDaGlsZHJlbiIsInJvdyIsImNyZWF0ZVRIZWFkIiwiaW5zZXJ0Um93IiwiY29sX25hbWUiLCJfIiwiaW5zZXJ0Q2VsbCIsImFwcGVuZENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJ0Ym9keSIsImNyZWF0ZVRCb2R5IiwiZGF0YSIsIm91dHB1dCIsImNvbF9hdHRyIiwidmFsdWUiLCJ0b1N0cmluZyIsInJlYWR5U3RhdGUiLCJhZGRFdmVudExpc3RlbmVyIl0sInNvdXJjZVJvb3QiOiIifQ==