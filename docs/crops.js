/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/crops.ts ***!
  \**********************/

var Season;
(function (Season) {
    Season[Season["SPRING"] = 0] = "SPRING";
    Season[Season["SUMMER"] = 1] = "SUMMER";
    Season[Season["FALL"] = 2] = "FALL";
})(Season || (Season = {}));
class Crop {
    constructor(name, season, seed_cost, days_to_grow, regrowth_period, sell_price, crop_yield, percent_chance_extra) {
        this.name = name;
        this.season = season;
        this.seed_cost = seed_cost;
        this.days_to_grow = days_to_grow;
        this.regrowth_period = regrowth_period;
        this.sell_price = sell_price;
        this.crop_yield = crop_yield;
        this.percent_chance_extra = percent_chance_extra;
    }
}
// Example crop
let parsnip = new Crop("Parsnip", Season.SPRING, 20, 4, null, 35, 1, 0);
let crops = [parsnip];
let HEADER = ["Name", "Season", "Seed Cost"];
function hydrateTable() {
    console.log("Hydrating!");
    let table = document.getElementById("crop-table");
    if (!(table instanceof HTMLTableElement)) {
        throw new Error("crop-table should be a <table>");
    }
    table.replaceChildren();
    // Table header
    let thead = table.createTHead();
    let row = thead.insertRow();
    for (let key of HEADER) {
        row.insertCell().appendChild(document.createTextNode(key));
    }
    let tbody = table.createTBody();
    for (let crop of crops) {
        let row = tbody.insertRow();
        row.insertCell().appendChild(document.createTextNode(crop.name));
        row.insertCell().appendChild(document.createTextNode(crop.season.toString()));
        row.insertCell().appendChild(document.createTextNode(crop.seed_cost.toString()));
    }
}
// Hydrate the table
if (document.readyState === "loading") {
    // Loading hasn't finished yet
    document.addEventListener("DOMContentLoaded", hydrateTable);
}
else {
    // `DOMContentLoaded` has already fired
    hydrateTable();
}

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQztBQUNoRSxDQUFDO0tBQU0sQ0FBQztJQUNKLHVDQUF1QztJQUN2QyxZQUFZLEVBQUUsQ0FBQztBQUNuQixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL2Nyb3BzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuZW51bSBTZWFzb24ge1xyXG4gICAgU1BSSU5HLCBTVU1NRVIsIEZBTExcclxufVxyXG5cclxuY2xhc3MgQ3JvcCB7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nLFxyXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBzZWFzb246IFNlYXNvbixcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgc2VlZF9jb3N0OiBudW1iZXIsXHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IGRheXNfdG9fZ3JvdzogbnVtYmVyLFxyXG4gICAgICAgIHB1YmxpYyByZWFkb25seSByZWdyb3d0aF9wZXJpb2Q6IG51bWJlciB8IG51bGwsXHJcbiAgICAgICAgcHVibGljIHJlYWRvbmx5IHNlbGxfcHJpY2U6IG51bWJlcixcclxuICAgICAgICBwdWJsaWMgcmVhZG9ubHkgY3JvcF95aWVsZDogbnVtYmVyLFxyXG4gICAgICAgIHB1YmxpYyByZWFkb25seSBwZXJjZW50X2NoYW5jZV9leHRyYTogbnVtYmVyLFxyXG4gICAgKSB7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEV4YW1wbGUgY3JvcFxyXG5sZXQgcGFyc25pcCA9IG5ldyBDcm9wKFxyXG4gICAgXCJQYXJzbmlwXCIsXHJcbiAgICBTZWFzb24uU1BSSU5HLCAyMCwgNCwgbnVsbCwgMzUsIDEsIDBcclxuKTtcclxubGV0IGNyb3BzID0gW3BhcnNuaXBdO1xyXG5cclxubGV0IEhFQURFUiA9IFtcIk5hbWVcIiwgXCJTZWFzb25cIiwgXCJTZWVkIENvc3RcIl07XHJcblxyXG5mdW5jdGlvbiBoeWRyYXRlVGFibGUoKSB7XHJcbiAgICBjb25zb2xlLmxvZyhcIkh5ZHJhdGluZyFcIik7XHJcbiAgICBsZXQgdGFibGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNyb3AtdGFibGVcIik7XHJcbiAgICBpZiAoISh0YWJsZSBpbnN0YW5jZW9mIEhUTUxUYWJsZUVsZW1lbnQpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY3JvcC10YWJsZSBzaG91bGQgYmUgYSA8dGFibGU+XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHRhYmxlLnJlcGxhY2VDaGlsZHJlbigpO1xyXG5cclxuICAgIC8vIFRhYmxlIGhlYWRlclxyXG4gICAgbGV0IHRoZWFkID0gdGFibGUuY3JlYXRlVEhlYWQoKTtcclxuICAgIGxldCByb3cgPSB0aGVhZC5pbnNlcnRSb3coKTtcclxuICAgIGZvciAobGV0IGtleSBvZiBIRUFERVIpIHtcclxuICAgICAgICByb3cuaW5zZXJ0Q2VsbCgpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGtleSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB0Ym9keSA9IHRhYmxlLmNyZWF0ZVRCb2R5KCk7XHJcbiAgICBmb3IgKGxldCBjcm9wIG9mIGNyb3BzKSB7XHJcbiAgICAgICAgbGV0IHJvdyA9IHRib2R5Lmluc2VydFJvdygpO1xyXG4gICAgICAgIHJvdy5pbnNlcnRDZWxsKCkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3JvcC5uYW1lKSk7XHJcbiAgICAgICAgcm93Lmluc2VydENlbGwoKS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjcm9wLnNlYXNvbi50b1N0cmluZygpKSk7XHJcbiAgICAgICAgcm93Lmluc2VydENlbGwoKS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjcm9wLnNlZWRfY29zdC50b1N0cmluZygpKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEh5ZHJhdGUgdGhlIHRhYmxlXHJcbmlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImxvYWRpbmdcIikge1xyXG4gICAgLy8gTG9hZGluZyBoYXNuJ3QgZmluaXNoZWQgeWV0XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBoeWRyYXRlVGFibGUpO1xyXG59IGVsc2Uge1xyXG4gICAgLy8gYERPTUNvbnRlbnRMb2FkZWRgIGhhcyBhbHJlYWR5IGZpcmVkXHJcbiAgICBoeWRyYXRlVGFibGUoKTtcclxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==